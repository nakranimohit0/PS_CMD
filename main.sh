#!/bin/sh
: '
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	Mohit Nakrani, Charles Golonek, Christian Talla
	CS 332: OS Project [Bash - By Mohit Nakrani]
	Oct. 19, 2015
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
'

# Error on failure, display the message and exit
fail() {
	echo $@
	exit
}

# Display help info
help() {
	printf "\nUsage: sudo ./main.sh {--help} [Field1=Value1] [Field2=Value2]...\n\n"
	printf "\t--help\t\t: Display help info\n"
	printf "\tField1=Value1\t: Filter the list by field1 = value1 specified.\n\t\t\t  Field can be any one of: [PID, PPID, STATE, UID, POLICY, CMD]\n\n"
	printf "Please note: Multiple filters have \"AND\" Join\n\n"
	exit
}

# Display help, if spcified in arguments
[ "$1" = "--help" ] && help

# Make using the Makefile which generates the source files to install and remove kernel modules
make -s || fail "Error: make failed."

# Clear the kernel message log before the new output is generated by the kernel module
dmesg -C

# Install / Load the kernel module
insmod main.ko || fail "Error: insmod failed to load the kernel module."
# Remove the kernel module
rmmod main.ko || fail "Error: rmmod failed to unload the kernel module."

# Get the header that starts with '#' from the output in the message log
s="`dmesg -t | grep '^#'`"
# Remove the '#'
s="${s//#/}"
# Print the header separated by a <TAB>
printf "${s// /'\t'}\n"

# Get all the arguments for switches / filters
args=($@)

# Get the index of the field name (PID or UID or etc) in the header; Ex:[index of PPID in header:(PID PPID UID...) is 1]
getIndx() {
	# Create a list of field names from the header
	local ls=($s)
	# Find and return the index
	for i in ${!ls[@]}; do
		[[ "${ls[i]}" = "$1" ]] && echo $i && return
	done
}

# Filter the particular record (the process) using the switches provided in the argumentcan
filter() {
	# Return if no arguments (switches) are provided [Display the record (the process)]
	[[ "${args[@]}" = "" ]] && echo 1 && return
	# Create a list of all the field values from the record
   	local ls=($@)

	# Check to find out whether the record (the process) satisfy each filter
	for arg in ${args[@]}; do
		# Seperate out an filter argument into a pair of key (field name) and an associated specified value by replace '=' by space
		local map=(${arg//=/ })
		# Check: If the field value from the record (the process) DOES NOT matche the field value from the arguments then return 0 [Do not display this record (the process)]
		[[ "${ls[`getIndx ${map[0]}`]}" = "${map[1]}" ]] || echo 0 || return
	done
	# Otherwise if all the field values match then return 1 [the record (the process) can be displayed]
	echo 1 && return
}

# Read each record (the process) from the message log and apply the filter
dmesg -t | grep '^[^#]' | while read line; do
	# Check and print the record (the process) if the record (the process) can be printed based on the filter
	[[ "`filter $line`" = "1" ]] && printf "${line// /'\t'}\n"
done
